sudo: false

# Caching so the next build will be fast too.
cache:
  directories:
  - $HOME/.ghc
  - $HOME/.stack
  - $HOME/.local/bin
  - $TRAVIS_BUILD_DIR/.stack-work
  - /c/Users/travis/AppData/Roaming/stack

matrix:
    include:
       - env: BUILD=linux
         compiler: musl stack linux
         language: generic
       - env: BUILD=mac
         compiler: stack mac
         language: generic
         os: osx
       - env: BUILD=win
         compiler: stack windows
         language: node_js
         node_js:
            - 12
         os: windows


#before_install:
# - |
#   set -ex
#   case "$BUILD" in
#       win)
#           choco install haskell-stack
#           ;;
#       mac)
#           travis_retry curl --insecure -L https://get.haskellstack.org/stable/osx-x86_64.tar.gz | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
#           ;;
#       *)
#           ;;
#   esac
#   set +ex
     
install:
    # - echo ">> trying only-dependencies $BUILD stack=$(which stack)"
    - |
      case "$BUILD" in
        linux)
            pushd docker
            #docker build . -t musl-ghc
            popd
            ;;
        *)
            #stack --no-terminal --install-ghc build --only-dependencies
            ;;
      esac

#script:
#    - echo ">> trying $BUILD stack=$(which stack)"
#    - |
#      case "$BUILD" in
#        linux)
#            docker run -v $HOME/.stack:/root/.stack -v $TRAVIS_BUILD_DIR:/app -it musl-ghc
#            tar zcvf binary-for-$BUILD.tar.gz ./elm
#            ;;
#        *)
#            stack --no-terminal build
#            tar zcvf binary-for-$BUILD.tar.gz -C $(stack path --local-install-root)/bin .
#            ;;
#      esac
#    - echo ">> zipped? $(ls -1 *.tar.gz)"
#
#deploy:
#  name: 0.19.1.3
#  provider: releases
#  api_key:
#      secure: Bp+9vCw44gZiZ4qm8xKS6OCSrEfSx9DJaAmTQyduLvHnZCStEvTmwxF6/bkjU8mJR4OBqpKLq1rEPDTYmpCWWP19QIIXE+953owTh6aIqY/5575X0xwNsqQ3/5CoLexCyizgqJFDTM7w6bpwPn3nqIUCAZDy4+G0BWWaAji7bv7+xJeF1TDLR8uVD5KwtW7H3I6C+P+KA/W9NGvgJW9L7ugltuOAqGUvmesG8gutuiUJ2wDtoEz/jLDuciVDhBe6xKG1JPM6S0jRuKGH1WP6zmDTnHcqW/1dMnqI/Y9s46c390cnb4uRbjxtikvuJJxGxx1hU6UO9d+DdL3ACqPxhlTPl3XQYC0+L7B/AStMnUnbhBvXAorMCKyjZyNEZuHqSrFldBA4ZzsCasgCSLCqjORx1t4i1v3XKsYsT1zQceEqWHPGa8lnp91PJBS+5N3J6ehnmL8N2vt+BKPj29w2IH8kTY8lyG4sjohzivwNgy6KWj4iwXMtgOceYgXHixecfp3xUwUKelWZfk5UWt82EFXa0L8VT3DhFf/OMhkeFjpSshqSd73boDeFhlHlU+4WrD6Xthy2lbTtpc5DVlmLMYsin/rTgBWGhMvr2L7V99/B6UMiGs5ZsdGM2nM8SZXRdW8bNh77mOZjOCutK16Xthrtj5q1bxaormTlCngziFU=
#  file: binary-for-$BUILD.tar.gz
#  overwrite: true
#  skip_cleanup: true
#  on:
#     tags: true
#     repo: m-mullins/compiler
#     all_branches: true
#

script:
 - |
   case "$BUILD" in
        win)
           pushd example
           npm install --save elm-mods
           echo 'Y' | npx elm init
           npx elm make src/Main.elm
           grep "_JS_log" index.html 
           ls -al node_modules/.bin/elm
           ls -al node_modules/elm-mods/bin
           popd
           ;;
       *)
           pushd example
           npm install --save elm-mods
           echo 'Y' | npx elm init
           npx elm make src/Main.elm
           grep "_JS_log" index.html 
           popd
           ;;

   esac
  
